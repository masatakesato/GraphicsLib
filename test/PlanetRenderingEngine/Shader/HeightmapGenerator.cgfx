#include "NoiseFunction.cgh"

//############################################################//
//###################### グローバル変数 ######################//
//############################################################//
float		g_HeightRange;			// 高さ
float		g_HorizontalScale;		// 水平方向のスケール
float		g_VerticalScale;		// 垂直方向のスケール
float4x4	g_matViewProj;			// モデルビュー変換行列

float		g_Radius;		// 球体の半径
float2		g_MapSize;	// テクスチャ一辺のピクセル数 (w, 1/w)
sampler2D	g_PosSampler;			// オブジェクト座標を保持するバッファ（オブジェクト空間で法線ベクトルを計算するために使う）

float3 MapToSphere(in float3 In)
{
	float3 Out;
	
	In /= g_Radius;

	Out.x = In.x * sqrt(1.0 - 0.5*In.y*In.y - 0.5*In.z*In.z + In.y*In.y*In.z*In.z / 3.0);
	Out.y = In.y * sqrt(1.0 - 0.5*In.z*In.z - 0.5*In.x*In.x + In.x*In.x*In.z*In.z / 3.0);
	Out.z = In.z * sqrt(1.0 - 0.5*In.x*In.x - 0.5*In.y*In.y + In.x*In.x*In.y*In.y / 3.0);

	return Out;
}



//############################################################//
//################### シェーダ入出力データ ###################//
//############################################################//
struct VertexData_In
{
	float4	position	: POSITION;
	float2	tex_uv		: TEXCOORD0;
};


struct VertexData_Out
{
	float4	position	: POSITION;
	float2	tex_uv		: TEXCOORD0;
	float4	pos			: TEXCOORD1;
};


struct PixelData_Out
{
	float	height	: COLOR0;
	float3	pos		: COLOR1;
};



//############################################################//
//################### バーテックスシェーダ ###################//
//############################################################//
VertexData_Out SimpleVertexShader_VS(VertexData_In IN)
{
	VertexData_Out	OUT;
	
	OUT.position = IN.position;
	OUT.tex_uv = IN.tex_uv;
	OUT.pos = IN.position;
	
	return OUT;
}

// 6面体の内部にカメラを配置してレンダリングする
VertexData_Out RenderCube_VS(VertexData_In IN)
{
	VertexData_Out	OUT;
	float4	pos_obj;// オブジェクトスペース上の頂点座標
	
	pos_obj = mul(g_matViewProj, IN.position);
	OUT.position = pos_obj;
	OUT.tex_uv = IN.tex_uv;
	OUT.pos = IN.position;

    return OUT;
}







//#############################################################//
//###################### ピクセルシェーダ #####################//
//#############################################################//


float GeneratePermTexture_PS(VertexData_Out IN) : COLOR0 // 頂点座標→配列インデックスへの変換処理を事前に行う
{
	float	p = IN.tex_uv.s;// 1次元[0,1]
	return GeneratePermTexture(p);
}

float4 GeneratePermTexture2d_PS(VertexData_Out IN) : COLOR0
{
	float2	p = IN.tex_uv.st;// 2次元(0,0)～(1,1)
	return GeneratePermTexture2d(p);
}

float4 GeneratePermGradTexture_PS(VertexData_Out IN) : COLOR0
{
	float	p = IN.tex_uv.s;// 1次元[0,1]
	return float4(GeneratePermGradTexture(p), 1.0);
}

float4 GenerateGradTexture4d_PS(VertexData_Out IN) : COLOR0
{
	float	p = IN.tex_uv.s;// 1次元[0,1]
	return GenerateGradTexture4d(p);
}



void GenerateHeightMap_PS(in VertexData_Out IN, out PixelData_Out OUT)
{
	float3	pos_sph = MapToSphere(IN.pos);// 頂点座標を半径１の球上にマッピング
	float	height = 0.0;
	//height = max( fBm(pos_sph*g_HorizontalScale, 12)-0.15, 0.0) * g_HeightRange;
	//height = max( fBm(pos_sph*g_HorizontalScale, 14) + ridgedmf(pos_sph*g_HorizontalScale, 16)-0.35, 0.0) * g_HeightRange;

	float c1 =	(
					ridgedmf	(pos_sph*1.2*g_HorizontalScale, /*12*/24, 2.0, 0.52, 1.0) +
					fBm			(pos_sph*1.4*g_HorizontalScale, /*20*/40, 2.0, 0.52)+1.0
				) * 0.5;

	float c3 =	(
					(
					ridgedmf(pos_sph*(1.1+c1)*g_HorizontalScale, /*8*/16, 1.8, 0.5, 0.5) + 
					fBm		(pos_sph*(1.3+c1)*g_HorizontalScale, /*16*/32, 1.8, 0.5)
					) * 0.5
				) / c1;
	
	height =  c3*g_VerticalScale * g_HeightRange;
	OUT.height	= height>g_HeightRange ? g_HeightRange - (height-g_HeightRange) : height;
	OUT.pos		= (g_Radius + OUT.height) * pos_sph;
}


// 法線マップを計算する
void GenerateNormalMap_PS(in VertexData_Out IN, out float4 normal : COLOR0)
{
	float3	v_l, v_t, v_r, v_b;
	float	bin = 0.51 * g_MapSize.y;

	v_l = tex2D(g_PosSampler, IN.tex_uv + float2(-bin, 0) );
	v_t = tex2D(g_PosSampler, IN.tex_uv + float2(0, +bin) );
	v_r = tex2D(g_PosSampler, IN.tex_uv + float2(+bin, 0) );
	v_b = tex2D(g_PosSampler, IN.tex_uv + float2(0, -bin) );
	
	normal.xyz = normalize( cross(v_r-v_l,v_t-v_b) );
	normal.w = abs( dot(normal.xyz, normalize(tex2D(g_PosSampler, IN.tex_uv)) ) );
}



//############################################################//
//######################### テクニック #######################//
//############################################################//


technique InitLookupTable
{
	pass GenPermTexture
	{
		VertexShader	= compile gp4vp SimpleVertexShader_VS();
		PixelShader		= compile gp4fp GeneratePermTexture_PS();

	}
    pass GenPermTexture2d
    {
		VertexShader	= compile gp4vp SimpleVertexShader_VS();
		PixelShader		= compile gp4fp GeneratePermTexture2d_PS();

		BlendEnable	= true;
    }
    pass GenPermGradTexture
    {
		VertexShader	= compile gp4vp SimpleVertexShader_VS();
		PixelShader		= compile gp4fp GeneratePermGradTexture_PS();

		BlendEnable	= true;
    }
    pass GenGradTexture4d
    {
		VertexShader	= compile gp4vp SimpleVertexShader_VS();
		PixelShader		= compile gp4fp GenerateGradTexture4d_PS();

		BlendEnable	= true;
    }
}


technique GenSphericalHeightMap
{
	pass P0// ハイトマップを計算する
	{
		VertexShader	= compile gp4vp RenderCube_VS();
		PixelShader		= compile gp4fp GenerateHeightMap_PS();
	}

	pass P1// 法線ベクトルを計算する
	{
		VertexShader	= compile gp4vp SimpleVertexShader_VS();
		PixelShader		= compile gp4fp GenerateNormalMap_PS();

		//BlendEnable				= true;
		//BlendEquationSeparate	= int2(FuncAdd, FuncAdd);
		//BlendFuncSeparate		= int4(One, One, One, One);
	}
}















/*
VertexData_Out SimpleVertexShader2_VS(VertexData_In IN)
{
	VertexData_Out	OUT;
	
	OUT.position = IN.position;
	OUT.tex_uv = IN.position.xyz;
	
	return OUT;
}
*/


/*
float4 Perlin_PS(VertexData_Out IN) : COLOR0
{	
	// scale the input coordinates
	float3	pos = IN.tex_uv * 10;

	// convert the result from [-1, +1] to [0, +1]
	return float4( float3(inoise(pos)*0.5+0.5), 0.0);
	
	//return tex1D(permSampler, IN.tex_uv.x);
	//return tex2D(permSampler2d, IN.tex_uv);
	//return tex1D(permGradSampler, IN.tex_uv.x);
	//return abs(tex1D(gradSampler4d, IN.tex_uv.x));
}


float4 fBm_PS(VertexData_Out IN): COLOR0
{
    // scale the input coordinates
	float3 pos = IN.tex_uv * 10;

	// convert the result from [-1, +1] to [0, +1]
	return fBm(pos, 12)*0.5+0.5;
}


float4 turbulence_PS(VertexData_Out IN): COLOR0
{
    // scale the input coordinates
	float3 pos = IN.tex_uv * 10;

	// convert the result from [-1, +1] to [0, +1]
	return turbulence(pos, 12)*0.5+0.5;
}


float4 RidgedMf_PS(VertexData_Out IN): COLOR0
{
    // scale the input coordinates
	float3 pos = IN.tex_uv * 10;

	// convert the result from [-1, +1] to [0, +1]
	return ridgedmf(pos, 12)*0.5+0.5;
}


float4	_PS(VertexData_Out IN): COLOR0
{
	return float4(IN.tex_uv.x, IN.tex_uv.y, 0.5, 1);
}
*/



/*
technique Perlin
{
    pass p0
    {
		VertexShader = compile gp4vp SimpleVertexShader2_VS();
		PixelShader  = compile gp4fp Perlin_PS();
    }
}

technique fBm
{
    pass p0
    {
		VertexShader = compile gp4vp SimpleVertexShader2_VS();
		PixelShader  = compile gp4fp fBm_PS();
    }
}

technique Turbulence
{
    pass p0 
    {
		VertexShader = compile gp4vp SimpleVertexShader2_VS();
		PixelShader  = compile gp4fp turbulence_PS();
    }
}

technique RidgedMf
{
    pass p0 
    {
		VertexShader = compile gp4vp SimpleVertexShader2_VS();
		PixelShader  = compile gp4fp RidgedMf_PS();
    }
}


technique VertexNoise
{
    pass
    {
		VertexShader = compile gp4vp VertexShaderFunction();
		PixelShader  = compile gp4fp _PS();

		CullFace = Back;
		CullFaceEnable = true;
    }
}


technique GenHeightMap
{
	pass fBm
	{
		VertexShader = compile gp4vp SimpleVertexShader_VS();
		PixelShader  = compile gp4fp GenerateHeightMap_PS();
	}

}
*/