float	Rg;
float	Rt;
static float	RL = Rt + 1.0;
static float	Rm = Rg + 1.0e-3;


int	TRANSMITTANCE_W;
int	TRANSMITTANCE_H;

int	SKY_W;
int	SKY_H;

int	RES_R;
int	RES_MU;
int	RES_MU_S;
int	RES_NU;


float AVERAGE_GROUND_REFLECTANCE = 0.1;

float			HR;
float3			betaR;

float			HM;
float3			betaMSca;
float			mieG;
static float3	betaMEx = betaMSca / 0.9;



//=================== 積分パラメータ =====================//
int		TRANSMITTANCE_INTEGRAL_SAMPLES = 500;// 注意！シェーダプロファイルｆｐ４０ではループは最大256回
int		INSCATTER_INTEGRAL_SAMPLES = 500;// 注意！シェーダプロファイルｆｐ４０ではループは最大256回
int		IRRADIANCE_INTEGRAL_SAMPLES = 32;
int		INSCATTER_SPHERICAL_INTEGRAL_SAMPLES = 16;

float	M_PI = 3.141592657;
float	MAXRADIAN_MU = 3.141592;

#define TRANSMITTANCE_NON_LINEAR
#define INSCATTER_NON_LINEAR



// ----------------------------------------------------------------------------
// PARAMETERIZATION FUNCTIONS
// ----------------------------------------------------------------------------

sampler2D	transmittanceSampler;

float2 getTransmittanceUV(float r, float mu)
{
    float uR, uMu;
	uR = (r - Rg) / (Rt - Rg);
	uMu = acos(mu) / MAXRADIAN_MU;
	
#ifdef TRANSMITTANCE_NON_LINEAR
	uR = sqrt((r - Rg) / (Rt - Rg));
	uMu = atan((mu + 0.15) / (1.0 + 0.15) * tan(1.5)) / 1.5;
#else
	uR = (r - Rg) / (Rt - Rg);
	uMu = (mu + 0.15) / (1.0 + 0.15);
#endif
	
    return float2(uMu, uR);
}

// getTransmittanceRMu
// テクスチャ座標(s,t)に対応する(mu,r)を返す.テクスチャ座標は[0,1]でいいよ
void getTransmittanceRMu(float2 tex_uv, out float r, out float muS)
{
	muS = tex_uv.x;
	r = tex_uv.y;

#ifdef TRANSMITTANCE_NON_LINEAR
	r = Rg + (r * r) * (Rt - Rg);
	muS = -0.15 + tan(1.5 * muS) / tan(1.5) * (1.0 + 0.15);
#else
	r = Rg + r * (Rt - Rg);
	muS = -0.15 + muS * (1.0 + 0.15);
#endif

}

float2 getIrradianceUV(float r, float muS)
{
	float	uR = (r - Rg) / (Rt - Rg);
	float	uMuS = (muS + 0.2) / (1.0 + 0.2);
	
	return float2(uMuS, uR);
}

void getIrradianceRMuS(float2 tex_uv, out float r, out float muS)
{
	r = Rg + (tex_uv.y*SKY_H - 0.5) / (float(SKY_H) - 1.0) * (Rt - Rg);
	muS = -0.2 + (tex_uv.x*SKY_W - 0.5) / (float(SKY_W) - 1.0) * (1.0 + 0.2);// サンプリングするレイの角度範囲を0°～役100°に制約してある(地平線より下にレイを飛ばしても意味なし)
}


float4 texture4D(sampler3D table, float r, float mu, float muS, float nu)// 意味不明20090206
{
	float H = sqrt(Rt * Rt - Rg * Rg);
	float rho = sqrt(r * r - Rg * Rg);

#ifdef INSCATTER_NON_LINEAR
	float rmu = r * mu;
	float delta = rmu * rmu - r * r + Rg * Rg;
	float4 cst = rmu < 0.0 && delta > 0.0 ? float4(1.0, 0.0, 0.0, 0.5 - 0.5 / float(RES_MU)) : float4(-1.0, H * H, H, 0.5 + 0.5 / float(RES_MU));
	float uR = 0.5 / float(RES_R) + rho / H * (1.0 - 1.0 / float(RES_R));
	float uMu = cst.w + (rmu * cst.x + sqrt(delta + cst.y)) / (rho + cst.z) * (0.5 - 1.0 / float(RES_MU));
	// paper formula
	//float uMuS = 0.5 / float(RES_MU_S) + max((1.0 - exp(-3.0 * muS - 0.6)) / (1.0 - exp(-3.6)), 0.0) * (1.0 - 1.0 / float(RES_MU_S));
	// better formula
	float uMuS = 0.5 / float(RES_MU_S) + (atan(max(muS, -0.1975) * tan(1.26 * 1.1)) / 1.1 + (1.0 - 0.26)) * 0.5 * (1.0 - 1.0 / float(RES_MU_S));
#else
	
	float uR = 0.5 / float(RES_R) + rho / H * (1.0 - 1.0 / float(RES_R));// 高度
	float uMu = 0.5 / float(RES_MU) + (mu + 1.0) / 2.0 * (1.0 - 1.0 / float(RES_MU));// 真上～空ベクトル内積
	float uMuS = 0.5 / float(RES_MU_S) + max(muS + 0.2, 0.0) / 1.2 * (1.0 - 1.0 / float(RES_MU_S));
#endif
	float lerp = (nu + 1.0) / 2.0 * (float(RES_NU) - 1.0);
	float uNu = floor(lerp);
	lerp = lerp - uNu;
	return	(1.0 - lerp) * tex3D( table, float3( (uNu+uMuS)/float(RES_NU), uMu, uR) )  +
			lerp		 * tex3D( table, float3( (uNu+uMuS+1.0)/float(RES_NU), uMu, uR) );
}


// テクスチャ座標(uv)を，InscatterTextureSの角度，高度に変換する
void getMuMuSNu(float r, float4 dhdH, float2 tex_uv, out float mu, out float muS, out float nu)
{
	//RES_MU_S*RES_NU, RES_MU,
	float	x = tex_uv.x*RES_MU_S*RES_NU - 0.5;//gl_FragCoord.x - 0.5;
	float	y = tex_uv.y*RES_MU - 0.5;//gl_FragCoord.y - 0.5;
	
#ifdef INSCATTER_NON_LINEAR
	if (y < float(RES_MU) / 2.0)
	{
		float d = 1.0 - y / (float(RES_MU) / 2.0 - 1.0);
		d = min(max(dhdH.z, d * dhdH.w), dhdH.w * 0.999);
		mu = (Rg * Rg - r * r - d * d) / (2.0 * r * d);
		mu = min(mu, -sqrt(1.0 - (Rg / r) * (Rg / r)) - 0.001);
	} else {
		float d = (y - float(RES_MU) / 2.0) / (float(RES_MU) / 2.0 - 1.0);
		d = min(max(dhdH.x, d * dhdH.y), dhdH.y * 0.999);
		mu = (Rt * Rt - r * r - d * d) / (2.0 * r * d);
	}
	muS = fmod(x, float(RES_MU_S)) / (float(RES_MU_S) - 1.0);
	// paper formula
	//muS = -(0.6 + log(1.0 - muS * (1.0 -  exp(-3.6)))) / 3.0;
	// better formula
	muS = tan((2.0 * muS - 1.0 + 0.26) * 1.1) / tan(1.26 * 1.1);
	nu = -1.0 + floor(x / float(RES_MU_S)) / (float(RES_NU) - 1.0) * 2.0;
#else
	mu = -1.0 + 2.0 * y / (float(RES_MU) - 1.0);
	muS = fmod(x, float(RES_MU_S)) / (float(RES_MU_S) - 1.0);
	muS = -0.2 + muS * 1.2;
	nu = -1.0 + floor(x / float(RES_MU_S)) / (float(RES_NU) - 1.0) * 2.0;
#endif
	
}


// ----------------------------------------------------------------------------
// UTILITY FUNCTIONS
// ----------------------------------------------------------------------------

// nearest intersection of ray r,mu with ground or top atmosphere boundary
// mu=cos(ray zenith angle at ray origin)
float limit(float r, float mu)
{
	float dout = -r * mu + sqrt(r * r * (mu * mu - 1.0) + RL * RL);
	
	float delta2 = r * r * (mu * mu - 1.0) + Rg * Rg;
	
	if (delta2 >= 0.0)
	{
		float din = -r * mu - sqrt(delta2);
		if (din >= 0.0)
			dout = min(dout, din);
	}
	
	return dout;
}


// transmittance(=transparency) of atmosphere for infinite ray (r,mu)
// (mu=cos(view zenith angle)), intersections with ground ignored
float3 transmittance(float r, float mu)
{
	float2 uv = getTransmittanceUV(r, mu);
	return tex2D(transmittanceSampler, uv).rgb;
}


// transmittance(=transparency) of atmosphere for infinite ray (r,mu)
// (mu=cos(view zenith angle)), or zero if ray intersects ground
float3 transmittanceWithShadow(float r, float mu)
{
	return mu <= -sqrt(1.0 - (Rg / r) * (Rg / r)) ? float3(0.0) : transmittance(r, mu);
}


// transmittance(=transparency) of atmosphere between x and x0
// assume segment x,x0 not intersecting ground
// r=||x||, mu=cos(zenith angle of [x,x0) ray at x), v=unit direction vector of [x,x0) ray
float3 transmittance(float r, float mu, float3 v, float3 x0)
{
	float3	result;
	float	r1 = length(x0);
	float	mu1 = dot(x0, v) / r;

	if(mu > 0.0)// 上向き
	{
		result = min(transmittance(r, mu) / transmittance(r1, mu1), 1.0);
	}
	else
	{
		result = min(transmittance(r1, -mu1) / transmittance(r, -mu), 1.0);
	}
	return result;
}


// optical depth for ray (r,mu) of length d, using analytic formula
// (mu=cos(view zenith angle)), intersections with ground ignored
// H=height scale of exponential density function
float opticalDepth(float H, float r, float mu, float d)
{
    float a = sqrt((0.5/H)*r);
    float2 a01 = a*float2(mu, mu + d / r);
    float2 a01s = sign(a01);
    float2 a01sq = a01*a01;
    float x = a01s.y > a01s.x ? exp(a01sq.x) : 0.0;
    float2 y = a01s / (2.3193*abs(a01) + sqrt(1.52*a01sq + 4.0)) * float2(1.0, exp(-d/H*(d/(2.0*r)+mu)));
    return sqrt((6.2831*H)*r) * exp((Rg-r)/H) * (x + dot(y, float2(1.0, -1.0)));
}


// transmittance(=transparency) of atmosphere for ray (r,mu) of length d
// (mu=cos(view zenith angle)), intersections with ground ignored
// uses analytic formula instead of transmittance texture
float3 analyticTransmittance(float r, float mu, float d)
{
    return exp(- betaR * opticalDepth(HR, r, mu, d) - betaMEx * opticalDepth(HM, r, mu, d));
}


// transmittance(=transparency) of atmosphere between x and x0
// assume segment x,x0 not intersecting ground
// d = distance between x and x0, mu=cos(zenith angle of [x,x0) ray at x)
float3 transmittance(float r, float mu, float d)
{
    float3	result;
    float	r1 = sqrt(r * r + d * d + 2.0 * r * mu * d);
    float	mu1 = (r * mu + d) / r1;
    if (mu > 0.0)
	{
        result = min(transmittance(r, mu) / transmittance(r1, mu1), 1.0);
    } else {
        result = min(transmittance(r1, -mu1) / transmittance(r, -mu), 1.0);
    }
    return result;
}


float3 irradiance(sampler2D sampler, float r, float muS)
{
	float2 uv = getIrradianceUV(r, muS);
	return tex2D(sampler, uv).rgb;
}


// Rayleigh phase function
float phaseFunctionR(float mu)
{
    return (3.0 / (16.0 * M_PI)) * (1.0 + mu * mu);
}


// Mie phase function
float phaseFunctionM(float mu)
{
	return 1.5 * 1.0 / (4.0 * M_PI) * (1.0 - mieG*mieG) * pow(1.0 + (mieG*mieG) - 2.0*mieG*mu, -3.0/2.0) * (1.0 + mu * mu) / (2.0 + mieG*mieG);
}


// approximated single Mie scattering (cf. approximate Cm in paragraph "Angular precision")
float3 getMie(float4 rayMie) // rayMie.rgb=C*, rayMie.w=Cm,r
{
	return rayMie.rgb * rayMie.w / max(rayMie.r, 1e-4) * (betaR.r / betaR);
}




//float3 HDR(float3 L, float exposure)
//{
//	L = L * exposure;
//	
//	L.r = L.r < 1.413 ? pow(L.r * 0.38317, 1.0 / 2.2) : 1.0 - exp(-L.r);
//	L.g = L.g < 1.413 ? pow(L.g * 0.38317, 1.0 / 2.2) : 1.0 - exp(-L.g);
//	L.b = L.b < 1.413 ? pow(L.b * 0.38317, 1.0 / 2.2) : 1.0 - exp(-L.b);
//	
//	return L;
//}



float3		ISun;
sampler2D	irradianceSampler;//precomputed skylight irradiance (E table)
sampler3D	inscatterSampler;//precomputed inscattered light (S table)





//inscattered light along ray x+tv, when sun in direction s (=S[L]-T(x,x0)S[L]|x0)
float3 inscatter(float3 x, float t, float3 v, float3 s, float r, float mu)
{
	float3 result = float3(0.0);

	if(r <= Rt) // カメラ位置が大気圏内にあるときだけ実行
	{
		float	nu = dot(v, s);// 
		float	muS = dot(x, s) / r; // x:上方向ベクトルと光源ベクトルの内積
		float	phaseR = phaseFunctionR(nu);
		float	phaseM = phaseFunctionM(nu);
		float	muHoriz = -sqrt(1.0 - (Rg / r) * (Rg / r));// cosθの許容角度
		float4	inscatter = float4(0);
		
		if(abs(mu - muHoriz) < 0.007)
		{
			mu = muHoriz + 0.007;// レイが地表と衝突するとき
			inscatter.w *= smoothstep(0.02, -0.02, muS);
		}
		
		inscatter.xyz = texture4D(inscatterSampler, r, mu, muS, nu);//S[L]
		result = max(inscatter.rgb * phaseR + getMie(inscatter) * phaseM, 0.0);
	}
	
	return result * ISun;
}


// direct sun light for ray x+tv, when sun in direction s (=L0)
float3 sunColor(float3 x, float t, float3 v, float3 s, float r, float mu)
{
	float3	transmittance = r <= Rt ? transmittanceWithShadow(r, mu) : float3(1.0); // T(x,xo)
	float	isun = step(cos(M_PI / 180.0), dot(v, s)) * ISun; // Lsun
	return	transmittance * isun; // Eq (9)
}




//ground radiance at end of ray x+tv, when sun in direction L
//attenuated bewteen ground and viewer (=R[L0]+R[L*])
float3 groundColor(float3 x, float t, float3 v, float3 L, float r, float mu, float3 material_color, float3 ground_reflectance)
{
	float3 result = float3(0.0);

	float	nu = dot(v, L);// 
	float	muS = dot(x, L) / r; // x:上方向ベクトルと光源ベクトルの内積
	float	phaseR = phaseFunctionR(nu);
	float	phaseM = phaseFunctionM(nu);
	float4	inscatter = max(texture4D(inscatterSampler, r, mu, muS, nu), 0.0);//S[L]

	float3	x0 = x + t * v;// 地表との衝突点
	float	r0 = length(x0);// 衝突点の高度
	float	rMu0 = dot(x0, v);
	float	mu0 = rMu0 / r0;
	float	muS0 = dot(x0, L) / r0;
	float3	attenuation = analyticTransmittance(r, mu, t);//transmittance(r, mu, v, x0);// 地表～カメラ間の光の減衰
	
	
	//================================= compute inscatter light ===========================//
	if(r0 > Rm)
	{
		// computes S[L]-T(x,x0)S[L]|x0
		inscatter = max(inscatter - attenuation.rgbr * texture4D(inscatterSampler, r0, mu0, muS0, nu), 0.0);

		// avoids imprecision problems near horizon by interpolating between two points above and below horizon
		const float EPS = 0.004;
		float muHoriz = -sqrt(1.0 - (Rg / r) * (Rg / r));// cosθの許容角度

		if(abs(mu - muHoriz) < EPS)
		{
			float a = ((mu - muHoriz) + EPS) / (2.0 * EPS);

			mu = muHoriz - EPS;// 下側
			r0 = sqrt(r * r + t * t + 2.0 * r * t * mu);
			mu0 = (r * mu + t) / r0;
			float4 inScatter0 = texture4D(inscatterSampler, r, mu, muS, nu);
			float4 inScatter1 = texture4D(inscatterSampler, r0, mu0, muS0, nu);
			float4 inScatterA = max(inScatter0 - attenuation.rgbr * inScatter1, 0.0);

			mu = muHoriz + EPS;// 上側
			r0 = sqrt(r * r + t * t + 2.0 * r * t * mu);
			mu0 = (r * mu + t) / r0;
			inScatter0 = texture4D(inscatterSampler, r, mu, muS, nu);
			inScatter1 = texture4D(inscatterSampler, r0, mu0, muS0, nu);
			float4 inScatterB = max(inScatter0 - attenuation.rgbr * inScatter1, 0.0);

			inscatter = mix(inScatterA, inScatterB, a);

		}// end of if(abs(mu - muHoriz) < EPS)
	}// end of if(r0 > Rg + 0.01)

	// avoids imprecision problems in Mie scattering when sun is below horizon// こっちが一番影響が出る
	inscatter.w *= smoothstep(0.02, -0.02, muS);

	inscatter.rgb = ISun * max(inscatter.rgb * phaseR + getMie(inscatter) * phaseM, 0.0);// 地表～カメラ間の光の増幅


	//=============================== ground reflectance at end of ray, x0 ==============================//
	
	// direct sun light (radiance) reaching x0
	float3	sunLight = transmittanceWithShadow(r0, muS);//transmittance(r0, muS);// 光源～地表間の光の減衰
	
	// precomputed sky light (irradiance) (=E[L*]) at x0
	float3	groundSkyLight = irradiance(irradianceSampler, r0, muS);
	
	// 水平線付近で太陽光の強さを減衰させる（かなりいい加減）
	float	occlusion = clamp(exp(muS0*75.0), 0, 1);

	// 地面の反射のBRDF(光源ベクトル，法線ベクトル，視線ベクトルから計算する)
	//float3	ground_reflectance = material_color.rgb * max(dot(n, L), 0.0);//
	
	// light reflected at x0 (=(R[L0]+R[L*])/T(x,x0))
	//float3	groundColor = ( ground_reflectance * sunLight + material_color.rgb * groundSkyLight) * ISun / M_PI;
	float3	groundColor = ground_reflectance * sunLight + material_color * groundSkyLight/M_PI * ISun; 
	
	//====================================== 全部たす ==================================================//
	result = occlusion * attenuation * groundColor + inscatter; //=R[L0]+R[L*]
	
	return result;
}
