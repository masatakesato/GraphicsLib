// computes transmittance table T using Eq (5)

#include "common.cgh"



float opticalDepth(float H, float r, float mu)// オプティカルデプスを計算する
{
    float result = 0.0;
    float dx = limit(r, mu) / float(TRANSMITTANCE_INTEGRAL_SAMPLES);
    float xi = 0.0;
    float yi = exp(-(r - Rg) / H);
    
    for (int i = 1; i <= TRANSMITTANCE_INTEGRAL_SAMPLES; ++i)
    {
        float xj = float(i) * dx;
        float yj = exp(-(sqrt(r * r + xj * xj + 2.0 * xj * r * mu) - Rg) / H);
        result += (yi + yj) / 2.0 * dx;
        xi = xj;
        yi = yj;
    }
	
    return mu < -sqrt(1.0 - (Rg / r) * (Rg / r)) ? 1.0e+9 : result;
}


//############################################################//
//################### バーテックスシェーダ ###################//
//############################################################//

// バーテックスシェーダ入力データ
struct VertexData_In
{
	float4	position	: POSITION;
	float2	tex_uv		: TEXCOORD0;
};

// バーテックスシェーダ出力データ
struct VertexData_Out
{
	float4	position	: POSITION;
	float2	tex_uv		: TEXCOORD0;
};

// [関数名]	Transmittance_VS
// [内容]	テクスチャ座標をピクセルシェーダに渡す
VertexData_Out Transmittance_VS(VertexData_In IN)
{
	VertexData_Out OUT;
	
	OUT.position = IN.position;
	OUT.tex_uv = IN.tex_uv;
	
	return OUT;
}

//#############################################################//
//######################## ピクセルシェーダ ###################//
//#############################################################//

// Transmittance計算
void Transmittance_PS( VertexData_Out IN, out float4 color_out : COLOR0)
{
	// muS→テクスチャ座標x, r→テクスチャ座標y
	float	muS;// = r_muS.x;
	float	r;// = r_muS.y;
    
	getTransmittanceRMu(IN.tex_uv, r, muS);
	float3	depth = betaR * opticalDepth(HR, r, muS) + betaMEx * opticalDepth(HM, r, muS);
	color_out = float4(exp(-depth), 0.0);
}


//############################################################//
//######################### テクニック #######################//
//############################################################//

technique PrecomputeTransmittance
{
	pass P0
	{
		VertexShader = compile gp4vp  Transmittance_VS();
		PixelShader = compile gp4fp Transmittance_PS();
	}

}