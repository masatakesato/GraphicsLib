// computes single scattering (line 3 in algorithm 4.1)
#include "common.cgh"


float	r;
float4	dhdH;
int		layer;


// inscatter1だけで使用
void integrand(float r, float mu, float muS, float nu, float t, out float3 ray, out float3 mie)
{
	ray = float3(0.0);
	mie = float3(0.0);
	float	ri = sqrt(r * r + t * t + 2.0 * r * mu * t);// ?
	float	muSi = (nu * t + muS * r) / ri;
	ri = max(Rg, ri);

	if (muSi >= -sqrt(1.0 - Rg * Rg / (ri * ri)))// ?
	{
		float3	ti = transmittance(r, mu, t) * transmittance(ri, muSi);
		ray = exp(-(ri - Rg) / HR) * ti;
		mie = exp(-(ri - Rg) / HM) * ti;
	}
}

// inscatterだけで使用
void inscatter(float r, float mu, float muS, float nu, out float3 ray, out float3 mie)
{
	ray = float3(0.0);
	mie = float3(0.0);

	float	dx = limit(r, mu) / float(INSCATTER_INTEGRAL_SAMPLES);
	float	xi = 0.0;
	float3	rayi;
	float3	miei;
	
	integrand(r, mu, muS, nu, 0.0, rayi, miei);

	for(int i = 1; i <= INSCATTER_INTEGRAL_SAMPLES; ++i)
	{
		float	xj = float(i) * dx;
		float3	rayj;
		float3	miej;

		integrand(r, mu, muS, nu, xj, rayj, miej);
		ray += (rayi + rayj) / 2.0 * dx;
		mie += (miei + miej) / 2.0 * dx;
		xi = xj;
		rayi = rayj;
		miei = miej;
	}

	ray *= betaR;
	mie *= betaMSca;
}



//############################################################//
//################### バーテックスシェーダ ###################//
//############################################################//


// バーテックスシェーダ入力データ
struct VertexData_In
{
	float4	position	: POSITION;
	float2	tex_uv		: TEXCOORD0;
};

// バーテックスシェーダ出力データ
struct VertexData_Out
{
	float4	position	: POSITION;
	float2	tex_uv		: TEXCOORD0;
};

// [関数名]	Inscatter1_VS
// [内容]	テクスチャ座標をピクセルシェーダに渡す
VertexData_Out Inscatter1_VS(VertexData_In IN)
{
	VertexData_Out OUT;
	
	OUT.position = IN.position;
	OUT.tex_uv = IN.tex_uv;
	
	return OUT;
}



//#############################################################//
//######################## ピクセルシェーダ ###################//
//#############################################################//

// Inscatter1計算
void Inscatter1_PS(VertexData_Out IN, out float3 color_out_ray	: COLOR0, out float3 color_out_mie	: COLOR1)
{
	float3	ray = float3(0.0);
	float3	mie = float3(0.0);
	float	mu, muS, nu;
	
	getMuMuSNu(r, dhdH, IN.tex_uv, mu, muS, nu);// テクスチャ座標に対応したmu,muS,nuを計算する
	inscatter(r, mu, muS, nu, ray, mie);
	// store separately Rayleigh and Mie contributions, WITHOUT the phase function factor
	// (cf "Angular precision")

	color_out_ray = ray;
	color_out_mie = mie;
	
	//color_out_ray = float3(muS, 0, 0);
	//color_out_mie = float3(IN.tex_uv.x, IN.tex_uv.y, 0);
}

/*
void main()
{
    vec3 ray;
    vec3 mie;
    float mu, muS, nu;
    getMuMuSNu(r, dhdH, mu, muS, nu);
    inscatter(r, mu, muS, nu, ray, mie);
    // store separately Rayleigh and Mie contributions, WITHOUT the phase function factor
    // (cf "Angular precision")
    gl_FragData[0].rgb = ray;
    gl_FragData[1].rgb = mie;
}
*/



//############################################################//
//######################### テクニック #######################//
//############################################################//

technique PrecomputeInscatter1
{
	pass P0
	{
		VertexShader = compile gp4vp  Inscatter1_VS();
		PixelShader = compile gp4fp Inscatter1_PS();

		DepthTestEnable = false;
	}
}