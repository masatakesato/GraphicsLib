// computes ground irradiance due to skylight E[deltaS] (line 8 in algorithm 4.1)
#include "common.cgh"



sampler3D	deltaSRSampler;
sampler3D	deltaSMSampler;
float		first;



//############################################################//
//################### バーテックスシェーダ ###################//
//############################################################//

// バーテックスシェーダ入力データ
struct VertexData_In
{
	float4	position	: POSITION;
	float2	tex_uv		: TEXCOORD0;
};

// バーテックスシェーダ出力データ
struct VertexData_Out
{
	float4	position	: POSITION;
	float2	tex_uv		: TEXCOORD0;
};


VertexData_Out IrradianceN_VS(VertexData_In IN)
{
	VertexData_Out OUT;
	
	OUT.position = IN.position;
	OUT.tex_uv = IN.tex_uv;
	
	return OUT;
}

//#############################################################//
//######################## ピクセルシェーダ ###################//
//#############################################################//

void IrradianceN_PS( VertexData_Out IN, out float4 color_out	: COLOR0)
{
	float	r, muS;
	float dphi = M_PI / float(IRRADIANCE_INTEGRAL_SAMPLES);
	float dtheta = M_PI / float(IRRADIANCE_INTEGRAL_SAMPLES);
	getIrradianceRMuS(IN.tex_uv, r, muS);
	float3	s = float3(sqrt(1.0 - muS * muS), 0.0, muS);
	float3	result = float3(0.0, 0.0, 0.0);
	
	// integral over 2.PI around x with two nested loops over w directions (theta,phi) -- Eq (15)
	for(int iphi = 0; iphi < 2 * IRRADIANCE_INTEGRAL_SAMPLES; ++iphi)
	{
		float	phi = (float(iphi) + 0.5) * dphi;

		for(int itheta = 0; itheta < IRRADIANCE_INTEGRAL_SAMPLES / 2; ++itheta)
		{
			float	theta = (float(itheta) + 0.5) * dtheta;
			float	dw = dtheta * dphi * sin(theta);
			float3	w = float3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));
			float	nu = dot(s, w);
			
			if (first == 1.0)
			{
				// first iteration is special because Rayleigh and Mie were stored separately,
				// without the phase functions factors; they must be reintroduced here
				float	pr1 = phaseFunctionR(nu);
				float	pm1 = phaseFunctionM(nu);
				float3	ray1 = texture4D(deltaSRSampler, r, w.z, muS, nu).rgb;
				float3	mie1 = texture4D(deltaSMSampler, r, w.z, muS, nu).rgb;
				result += (ray1 * pr1 + mie1 * pm1) * w.z * dw;
			} else {
				result += texture4D(deltaSRSampler, r, w.z, muS, nu).rgb * w.z * dw;
			}
		}// end of itheta
	}// end of iphi
	
	color_out = float4(result, 0.0);
}


/*
void main()
{
	float	r, muS;
	getIrradianceRMuS(r, muS);
	float3	s = float3(sqrt(1.0 - muS * muS), 0.0, muS);

	float3	result = float3(0.0);
	// integral over 2.PI around x with two nested loops over w directions (theta,phi) -- Eq (15)
	for (int iphi = 0; iphi < 2 * IRRADIANCE_INTEGRAL_SAMPLES; ++iphi)
	{
		float	phi = (float(iphi) + 0.5) * dphi;

		for (int itheta = 0; itheta < IRRADIANCE_INTEGRAL_SAMPLES / 2; ++itheta)
		{
			float	theta = (float(itheta) + 0.5) * dtheta;
			float	dw = dtheta * dphi * sin(theta);
			float3	w = float3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));
			float	nu = dot(s, w);

			if (first == 1.0)
			{
				// first iteration is special because Rayleigh and Mie were stored separately,
				// without the phase functions factors; they must be reintroduced here
				float	pr1 = phaseFunctionR(nu);
				float	pm1 = phaseFunctionM(nu);
				float3	ray1 = texture4D(deltaSRSampler, r, w.z, muS, nu).rgb;
				float3	mie1 = texture4D(deltaSMSampler, r, w.z, muS, nu).rgb;
				result += (ray1 * pr1 + mie1 * pm1) * w.z * dw;
			} else {
				result += texture4D(deltaSRSampler, r, w.z, muS, nu).rgb * w.z * dw;
			}
		}
	}

	gl_FragColor = float4(result, 0.0);
}
*/




//############################################################//
//######################### テクニック #######################//
//############################################################//

technique IrradianceN
{
	pass P0
	{
		VertexShader = compile gp4vp  IrradianceN_VS();
		PixelShader = compile gp4fp IrradianceN_PS();
	}

}